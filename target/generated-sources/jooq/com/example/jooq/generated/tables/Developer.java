/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.generated.tables;


import com.example.jooq.generated.Keys;
import com.example.jooq.generated.Sion;
import com.example.jooq.generated.enums.DeveloperGradeCode;
import com.example.jooq.generated.enums.DeveloperRole;
import com.example.jooq.generated.enums.DeveloperStatus;
import com.example.jooq.generated.tables.records.DeveloperRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function15;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Developer extends TableImpl<DeveloperRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>SION.developer</code>
     */
    public static final Developer DEVELOPER = new Developer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeveloperRecord> getRecordType() {
        return DeveloperRecord.class;
    }

    /**
     * The column <code>SION.developer.employee_identification_number</code>.
     */
    public final TableField<DeveloperRecord, String> EMPLOYEE_IDENTIFICATION_NUMBER = createField(DSL.name("employee_identification_number"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>SION.developer.employee_name</code>.
     */
    public final TableField<DeveloperRecord, String> EMPLOYEE_NAME = createField(DSL.name("employee_name"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>SION.developer.password</code>.
     */
    public final TableField<DeveloperRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>SION.developer.profile_image_url</code>.
     */
    public final TableField<DeveloperRecord, String> PROFILE_IMAGE_URL = createField(DSL.name("profile_image_url"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>SION.developer.phone_number</code>.
     */
    public final TableField<DeveloperRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.VARCHAR(11).nullable(false), this, "");

    /**
     * The column <code>SION.developer.joined_at</code>.
     */
    public final TableField<DeveloperRecord, LocalDateTime> JOINED_AT = createField(DSL.name("joined_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>SION.developer.email</code>.
     */
    public final TableField<DeveloperRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>SION.developer.career_years</code>.
     */
    public final TableField<DeveloperRecord, Integer> CAREER_YEARS = createField(DSL.name("career_years"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("1"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>SION.developer.salary</code>.
     */
    public final TableField<DeveloperRecord, Long> SALARY = createField(DSL.name("salary"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>SION.developer.status</code>.
     */
    public final TableField<DeveloperRecord, DeveloperStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(11).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)).asEnumDataType(com.example.jooq.generated.enums.DeveloperStatus.class), this, "");

    /**
     * The column <code>SION.developer.grade_code</code>.
     */
    public final TableField<DeveloperRecord, DeveloperGradeCode> GRADE_CODE = createField(DSL.name("grade_code"), SQLDataType.VARCHAR(1).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)).asEnumDataType(com.example.jooq.generated.enums.DeveloperGradeCode.class), this, "");

    /**
     * The column <code>SION.developer.created_at</code>.
     */
    public final TableField<DeveloperRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>SION.developer.updated_at</code>.
     */
    public final TableField<DeveloperRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>SION.developer.deleted_at</code>.
     */
    public final TableField<DeveloperRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>SION.developer.role</code>.
     */
    public final TableField<DeveloperRecord, DeveloperRole> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(8).nullable(false).asEnumDataType(com.example.jooq.generated.enums.DeveloperRole.class), this, "");

    private Developer(Name alias, Table<DeveloperRecord> aliased) {
        this(alias, aliased, null);
    }

    private Developer(Name alias, Table<DeveloperRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>SION.developer</code> table reference
     */
    public Developer(String alias) {
        this(DSL.name(alias), DEVELOPER);
    }

    /**
     * Create an aliased <code>SION.developer</code> table reference
     */
    public Developer(Name alias) {
        this(alias, DEVELOPER);
    }

    /**
     * Create a <code>SION.developer</code> table reference
     */
    public Developer() {
        this(DSL.name("developer"), null);
    }

    public <O extends Record> Developer(Table<O> child, ForeignKey<O, DeveloperRecord> key) {
        super(child, key, DEVELOPER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sion.SION;
    }

    @Override
    public UniqueKey<DeveloperRecord> getPrimaryKey() {
        return Keys.KEY_DEVELOPER_PRIMARY;
    }

    @Override
    public List<ForeignKey<DeveloperRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_GRADE_TO_DEVELOPER_1);
    }

    private transient Grade _grade;

    /**
     * Get the implicit join path to the <code>SION.grade</code> table.
     */
    public Grade grade() {
        if (_grade == null)
            _grade = new Grade(this, Keys.FK_GRADE_TO_DEVELOPER_1);

        return _grade;
    }

    @Override
    public Developer as(String alias) {
        return new Developer(DSL.name(alias), this);
    }

    @Override
    public Developer as(Name alias) {
        return new Developer(alias, this);
    }

    @Override
    public Developer as(Table<?> alias) {
        return new Developer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Developer rename(String name) {
        return new Developer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Developer rename(Name name) {
        return new Developer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Developer rename(Table<?> name) {
        return new Developer(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<String, String, String, String, String, LocalDateTime, String, Integer, Long, DeveloperStatus, DeveloperGradeCode, LocalDateTime, LocalDateTime, LocalDateTime, DeveloperRole> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function15<? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super Integer, ? super Long, ? super DeveloperStatus, ? super DeveloperGradeCode, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super DeveloperRole, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function15<? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super Integer, ? super Long, ? super DeveloperStatus, ? super DeveloperGradeCode, ? super LocalDateTime, ? super LocalDateTime, ? super LocalDateTime, ? super DeveloperRole, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
