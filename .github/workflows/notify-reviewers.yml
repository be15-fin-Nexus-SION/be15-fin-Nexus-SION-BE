name: Notify Reviewers on PR

on:
  repository_dispatch:
    types: [notify-reviewers]

permissions:
  issues: write
  pull-requests: write

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Get PR info
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.client_payload.pr_number
            });

            core.setOutput("html_url", pr.data.html_url);
            core.setOutput("number", pr.data.number.toString());
            core.setOutput("reviewers", JSON.stringify(pr.data.requested_reviewers.map(r => r.login)));

      - name: Map GitHub usernames to Discord IDs
        id: map-reviewers
        run: |
          declare -A USER_MAP=(
            ["sezeme"]="534088965050073089"
            ["Kihong12"]="385400409654820864"
            ["kimjy8937"]="592708683687788557"
            ["ckaudgh"]="417182025401892868"
            ["didiha"]="1069488556206206997"
            ["develup-psy"]="531501995140448267"
          )

          reviewers=$(echo '${{ steps.pr.outputs.reviewers }}' | jq -r '.[]')
          mentions=""
          for login in $reviewers; do
            id=${USER_MAP[$login]}
            if [ -n "$id" ]; then
              mentions+="<@$id> "
            else
              echo "⚠️ No Discord ID mapped for $login"
            fi
          done

          echo "mentions=$mentions" >> "$GITHUB_OUTPUT"

      - name: Check if notification already sent (by PR comment)
        id: check
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt("${{ steps.pr.outputs.number }}"),
            });

            const notified = comments.data.some(comment =>
              comment.body.includes("[🔔 Reviewer Notified]")
            );

            return notified ? "true" : "false";

      - name: Send Discord Notification
        if: steps.check.outputs.result == 'false'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          MENTIONS: ${{ steps.map-reviewers.outputs.mentions }}
          PR_URL: ${{ steps.pr.outputs.html_url }}
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d "{
            \"content\": \"📣 $MENTIONS님! Pull Request 리뷰어로 지정됐습니다. 확인해 주세요.\\n🔗 PR: $PR_URL\",
            \"allowed_mentions\": {
              \"parse\": [\"users\"]
            }
          }" \
          "$DISCORD_WEBHOOK_URL"

      - name: Add notification comment to PR
        if: steps.check.outputs.result == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt("${{ steps.pr.outputs.number }}"),
              body: "[🔔 Reviewer Notified] Discord 알림이 전송되었습니다."
            });
